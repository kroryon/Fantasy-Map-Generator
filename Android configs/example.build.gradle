apply plugin: 'com.android.application'

android {
    namespace "com.azgaar.fantasymapgenerator"
    compileSdk rootProject.ext.compileSdkVersion
    signingConfigs {
        release {
            storeFile file(System.getProperty("user.home") + "/.android/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    defaultConfig {
        applicationId "com.azgaar.fantasymapgenerator"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

// Azgaar icon configuration
def azgaarIcon = file("$rootDir/images/icons/icon_x512.png")
def densities = ["mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi"]

task copyAzgaarIcons {
    description = "Copy Azgaar app icon into all mipmap folders"
    doLast {
        // Create ic_launcher_background.xml if it doesn't exist
        def valuesDir = "$projectDir/src/main/res/values"
        def bgFile = new File("$valuesDir/ic_launcher_background.xml")
        if (!bgFile.exists()) {
            bgFile.text = '<?xml version="1.0" encoding="utf-8"?>\n<resources>\n    <color name="ic_launcher_background">#FFFFFF</color>\n</resources>'
            println "Created ic_launcher_background.xml"
        }
        
        densities.each { density ->
            def mipmapDir = "$projectDir/src/main/res/mipmap-${density}"
            copy {
                from azgaarIcon
                into mipmapDir
                rename { 'ic_launcher.png' }
            }
            copy {
                from azgaarIcon
                into mipmapDir
                rename { 'ic_launcher_round.png' }
            }
            // Copiar como foreground para adaptive icon
            copy {
                from azgaarIcon
                into mipmapDir
                rename { 'ic_launcher_foreground.png' }
            }
            // Copiar para adaptive icon foreground en mipmap-anydpi-v26
            def anydpiDir = "$projectDir/src/main/res/mipmap-anydpi-v26"
            if (file(anydpiDir).exists()) {
                copy {
                    from azgaarIcon
                    into anydpiDir
                    rename { 'ic_launcher_foreground.png' }
                }
            }
        }
    }
}

preBuild.dependsOn(copyAzgaarIcons)

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
