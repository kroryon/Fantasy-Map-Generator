const { app, BrowserWindow, Menu, shell, dialog } = require('electron');
const path = require('path');
const fs = require('fs');

// Intenta cargar express de forma segura
let express;
try {
  express = require('express');
} catch (error) {
  console.log('Express no está disponible, usando protocolo file:// en su lugar');
}

let mainWindow;
let server;

function createWindow() {
  // Crear la ventana principal de la aplicación
  mainWindow = new BrowserWindow({
    width: 1400,
    height: 900,
    minWidth: 800,
    minHeight: 600,
    icon: path.join(__dirname, 'images/icons/icon_x512.png'),
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      webSecurity: false, // Necesario para cargar recursos locales
      allowRunningInsecureContent: true
    },
    show: false // No mostrar hasta que esté lista
  });

  if (express) {
    // Si express está disponible, usamos el servidor local
    createExpressServer();
  } else {
    // Si express no está disponible (versión portable), cargamos directamente con file://
    const indexPath = path.join(__dirname, 'index.html');
    console.log(`Cargando directamente desde: ${indexPath}`);
    mainWindow.loadFile(indexPath);
    
    // Mostrar la ventana cuando esté lista
    mainWindow.once('ready-to-show', () => {
      mainWindow.show();
      if (process.platform === 'darwin') {
        app.dock.show();
      }
    });
  }

  // Configurar el menú
  createMenu();

  // Manejar links externos
  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url);
    return { action: 'deny' };
  });

  // Manejar el evento de cerrar ventana
  mainWindow.on('closed', () => {
    mainWindow = null;
    if (server) {
      server.close();
    }
  });

  // Manejar errores de carga
  mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
    console.error('Error al cargar:', errorCode, errorDescription);
  });

  // Abrir DevTools en modo desarrollo
  if (process.argv.includes('--dev')) {
    mainWindow.webContents.openDevTools();
  }
}

function createExpressServer() {
  // Crear servidor Express local
  const expressApp = express();
  
  // Servir archivos estáticos desde el directorio actual
  expressApp.use(express.static(__dirname, {
    setHeaders: (res, path) => {
      // Configurar headers apropiados para diferentes tipos de archivo
      if (path.endsWith('.js')) {
        res.setHeader('Content-Type', 'application/javascript');
      } else if (path.endsWith('.css')) {
        res.setHeader('Content-Type', 'text/css');
      } else if (path.endsWith('.svg')) {
        res.setHeader('Content-Type', 'image/svg+xml');
      } else if (path.endsWith('.json')) {
        res.setHeader('Content-Type', 'application/json');
      }
    }
  }));

  // Iniciar el servidor en un puerto disponible
  server = expressApp.listen(0, 'localhost', () => {
    const port = server.address().port;
    console.log(`Servidor local iniciado en puerto ${port}`);
    
    // Cargar la aplicación
    mainWindow.loadURL(`http://localhost:${port}`);
    
    // Mostrar la ventana cuando esté lista
    mainWindow.once('ready-to-show', () => {
      mainWindow.show();
      
      // Enfocar la ventana
      if (process.platform === 'darwin') {
        app.dock.show();
      }
    });
  });
}

function createMenu() {
  const template = [
    {
      label: 'Archivo',
      submenu: [
        {
          label: 'Nuevo Mapa',
          accelerator: 'CmdOrCtrl+N',
          click: () => {
            mainWindow.webContents.executeJavaScript('location.reload()');
          }
        },
        {
          label: 'Abrir Mapa...',
          accelerator: 'CmdOrCtrl+O',
          click: async () => {
            const result = await dialog.showOpenDialog(mainWindow, {
              properties: ['openFile'],
              filters: [
                { name: 'Archivos de Mapa', extensions: ['map', 'gz'] },
                { name: 'Todos los archivos', extensions: ['*'] }
              ]
            });
            
            if (!result.canceled && result.filePaths.length > 0) {
              const filePath = result.filePaths[0];
              // Aquí podrías implementar la carga del archivo
              console.log('Archivo seleccionado:', filePath);
            }
          }
        },
        { type: 'separator' },
        {
          label: 'Salir',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => {
            app.quit();
          }
        }
      ]
    },
    {
      label: 'Ver',
      submenu: [
        { role: 'reload', label: 'Recargar' },
        { role: 'forceReload', label: 'Forzar Recarga' },
        { role: 'toggleDevTools', label: 'Herramientas de Desarrollador' },
        { type: 'separator' },
        { role: 'resetZoom', label: 'Zoom Normal' },
        { role: 'zoomIn', label: 'Acercar' },
        { role: 'zoomOut', label: 'Alejar' },
        { type: 'separator' },
        { role: 'togglefullscreen', label: 'Pantalla Completa' }
      ]
    },
    {
      label: 'Ventana',
      submenu: [
        { role: 'minimize', label: 'Minimizar' },
        { role: 'close', label: 'Cerrar' }
      ]
    },
    {
      label: 'Ayuda',
      submenu: [
        {
          label: 'Acerca de Fantasy Map Generator',
          click: () => {
            dialog.showMessageBox(mainWindow, {
              type: 'info',
              title: 'Acerca de',
              message: 'Fantasy Map Generator',
              detail: 'Generador de mapas fantásticos de Azgaar\nVersión de Escritorio\n\nCreado por Azgaar\nPortado a Electron'
            });
          }
        },
        {
          label: 'GitHub',
          click: () => {
            shell.openExternal('https://github.com/Azgaar/Fantasy-Map-Generator');
          }
        }
      ]
    }
  ];

  // Ajustes específicos para macOS
  if (process.platform === 'darwin') {
    template.unshift({
      label: app.getName(),
      submenu: [
        { role: 'about', label: 'Acerca de ' + app.getName() },
        { type: 'separator' },
        { role: 'services', label: 'Servicios' },
        { type: 'separator' },
        { role: 'hide', label: 'Ocultar ' + app.getName() },
        { role: 'hideothers', label: 'Ocultar Otros' },
        { role: 'unhide', label: 'Mostrar Todo' },
        { type: 'separator' },
        { role: 'quit', label: 'Salir de ' + app.getName() }
      ]
    });

    // Menú Ventana en macOS
    template[4].submenu = [
      { role: 'close', label: 'Cerrar' },
      { role: 'minimize', label: 'Minimizar' },
      { role: 'zoom', label: 'Zoom' },
      { type: 'separator' },
      { role: 'front', label: 'Traer Todo al Frente' }
    ];
  }

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

// Este método será llamado cuando Electron haya terminado la inicialización
app.whenReady().then(() => {
  createWindow();

  app.on('activate', () => {
    // En macOS, re-crear una ventana cuando se hace clic en el icono del dock
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Salir cuando todas las ventanas están cerradas
app.on('window-all-closed', () => {
  // En macOS, es común que las aplicaciones permanezcan activas hasta que el usuario salga explícitamente
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// Manejar el evento de segunda instancia (solo una instancia)
const gotTheLock = app.requestSingleInstanceLock();

if (!gotTheLock) {
  app.quit();
} else {
  app.on('second-instance', () => {
    // Alguien intentó ejecutar una segunda instancia, enfocar nuestra ventana
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore();
      mainWindow.focus();
    }
  });
}
